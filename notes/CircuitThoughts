- Need some sort of rewriter fixpoint that "replaces" ids with their
  expressions, i.e. optimizer
- Change UNINIT to signal X

- for each input signal iSignal,
  replace each (AId __) with iSignal
  
- Eliminate Ids from expression -> force
  replace them with underlying signal or copy
  in assigned expression
  
- Differences between outwires and internal wires:
  -> Outwires formulated in terms of inwires and/or internal wires
  -> Internal wires formulated in terms of inwires and/or internal wires
  
  
  
The problem is that a wire could theoretically refer to itself, or
2 wires could cross-refer to each other -> this is uncomputable in Coq
  -> Evaluate each wire expression. If all ids refer to computable signals,
     label the wire as computable.
     
     
Or give types to all identifiers
  -> i0, i1 are signal identifiers
  -> p0, p1, eq derived identifiers
  
p0 only uses signal identifiers, so is computable
p1 only uses signal identifiers, so is computable
eq only uses computable identifiers, so is computable


Inductive relation
operations on an expression bring a signal map from one state to another

Even further: take a single expression (output wire), couple with a circuit map (expressions) and a signal map (inputs)
EBitOr (EId p0) (EId p1)
apply left_or
(EId p0)
apply <transformation that replaces this with the expression from the circuit map>
...continue like this

Then formulate proofs for the 4 possible input combinations.

